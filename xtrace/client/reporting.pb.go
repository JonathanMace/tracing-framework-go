// Code generated by protoc-gen-go.
// source: reporting.proto
// DO NOT EDIT!

/*
Package pubsub is a generated protocol buffer package.

It is generated from these files:
	reporting.proto

It has these top-level messages:
	XTraceReportv4
*/
package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The report specification for X-Trace version 4.
type XTraceReportv4 struct {
	// X-Trace related fields
	TaskId        *int64  `protobuf:"fixed64,1,opt,name=task_id" json:"task_id,omitempty"`
	EventId       *int64  `protobuf:"fixed64,2,opt,name=event_id" json:"event_id,omitempty"`
	ParentEventId []int64 `protobuf:"fixed64,3,rep,name=parent_event_id" json:"parent_event_id,omitempty"`
	// Timestamp fields
	Timestamp *int64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Hrt       *int64 `protobuf:"varint,5,opt,name=hrt" json:"hrt,omitempty"`
	Cycles    *int64 `protobuf:"varint,6,opt,name=cycles" json:"cycles,omitempty"`
	// Report source fields
	Host        *string `protobuf:"bytes,7,opt,name=host" json:"host,omitempty"`
	ProcessId   *int32  `protobuf:"varint,8,opt,name=process_id" json:"process_id,omitempty"`
	ProcessName *string `protobuf:"bytes,9,opt,name=process_name" json:"process_name,omitempty"`
	ThreadId    *int32  `protobuf:"varint,10,opt,name=thread_id" json:"thread_id,omitempty"`
	ThreadName  *string `protobuf:"bytes,11,opt,name=threadName" json:"threadName,omitempty"`
	Agent       *string `protobuf:"bytes,12,opt,name=agent" json:"agent,omitempty"`
	Source      *string `protobuf:"bytes,13,opt,name=source" json:"source,omitempty"`
	// Messages
	Label *string  `protobuf:"bytes,14,opt,name=label" json:"label,omitempty"`
	Key   []string `protobuf:"bytes,15,rep,name=key" json:"key,omitempty"`
	Value []string `protobuf:"bytes,16,rep,name=value" json:"value,omitempty"`
	Tags  []string `protobuf:"bytes,17,rep,name=tags" json:"tags,omitempty"`
	// X-Trace Tenant field
	TenantClass      *int32 `protobuf:"varint,18,opt,name=tenantClass" json:"tenantClass,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *XTraceReportv4) Reset()                    { *m = XTraceReportv4{} }
func (m *XTraceReportv4) String() string            { return proto.CompactTextString(m) }
func (*XTraceReportv4) ProtoMessage()               {}
func (*XTraceReportv4) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *XTraceReportv4) GetTaskId() int64 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *XTraceReportv4) GetEventId() int64 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *XTraceReportv4) GetParentEventId() []int64 {
	if m != nil {
		return m.ParentEventId
	}
	return nil
}

func (m *XTraceReportv4) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *XTraceReportv4) GetHrt() int64 {
	if m != nil && m.Hrt != nil {
		return *m.Hrt
	}
	return 0
}

func (m *XTraceReportv4) GetCycles() int64 {
	if m != nil && m.Cycles != nil {
		return *m.Cycles
	}
	return 0
}

func (m *XTraceReportv4) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *XTraceReportv4) GetProcessId() int32 {
	if m != nil && m.ProcessId != nil {
		return *m.ProcessId
	}
	return 0
}

func (m *XTraceReportv4) GetProcessName() string {
	if m != nil && m.ProcessName != nil {
		return *m.ProcessName
	}
	return ""
}

func (m *XTraceReportv4) GetThreadId() int32 {
	if m != nil && m.ThreadId != nil {
		return *m.ThreadId
	}
	return 0
}

func (m *XTraceReportv4) GetThreadName() string {
	if m != nil && m.ThreadName != nil {
		return *m.ThreadName
	}
	return ""
}

func (m *XTraceReportv4) GetAgent() string {
	if m != nil && m.Agent != nil {
		return *m.Agent
	}
	return ""
}

func (m *XTraceReportv4) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *XTraceReportv4) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *XTraceReportv4) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *XTraceReportv4) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *XTraceReportv4) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *XTraceReportv4) GetTenantClass() int32 {
	if m != nil && m.TenantClass != nil {
		return *m.TenantClass
	}
	return 0
}

func init() {
	proto.RegisterType((*XTraceReportv4)(nil), "pubsub.XTraceReportv4")
}

var fileDescriptor0 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x3c, 0x91, 0xbb, 0x6e, 0xf2, 0x40,
	0x10, 0x85, 0x05, 0xe6, 0xe6, 0xe1, 0x62, 0xd8, 0xff, 0x97, 0x32, 0x52, 0x1a, 0x94, 0x8a, 0xca,
	0x55, 0x9e, 0x80, 0xf4, 0x29, 0x50, 0x8a, 0x74, 0xd1, 0xda, 0x8c, 0x00, 0x61, 0x7b, 0xad, 0x9d,
	0x31, 0x09, 0x6f, 0x98, 0xc7, 0xca, 0xee, 0x44, 0x4e, 0xf9, 0x9d, 0xf3, 0xd9, 0x7b, 0xec, 0x85,
	0xcc, 0x53, 0xeb, 0xbc, 0x5c, 0x9a, 0x53, 0xde, 0x7a, 0x27, 0xce, 0x4c, 0xda, 0xae, 0xe0, 0xae,
	0x78, 0xfa, 0x1e, 0xc2, 0xea, 0xfd, 0xcd, 0xdb, 0x92, 0x0e, 0x6a, 0xdc, 0x9e, 0x4d, 0x06, 0x53,
	0xb1, 0x7c, 0xfd, 0xb8, 0x1c, 0x71, 0xb0, 0x1d, 0xec, 0xd6, 0x66, 0x0d, 0x33, 0xba, 0x51, 0x23,
	0x31, 0x19, 0x6a, 0xf2, 0x00, 0x59, 0x6b, 0x7d, 0x8c, 0xfe, 0x8a, 0x64, 0x9b, 0x84, 0x62, 0x03,
	0xa9, 0x5c, 0x6a, 0x62, 0xb1, 0x75, 0x8b, 0xa3, 0xe0, 0x26, 0x66, 0x0e, 0xc9, 0xd9, 0x0b, 0x8e,
	0x15, 0x56, 0x30, 0x29, 0xef, 0x65, 0x45, 0x8c, 0x13, 0xe5, 0x05, 0x8c, 0xce, 0x8e, 0x05, 0xa7,
	0x81, 0x52, 0x63, 0x00, 0xc2, 0xba, 0x92, 0x98, 0xe3, 0x1b, 0x67, 0x21, 0x1b, 0x9b, 0xff, 0xb0,
	0xe8, 0xb3, 0xc6, 0xd6, 0x84, 0xa9, 0x9a, 0xf1, 0x9c, 0xb3, 0x27, 0x7b, 0x8c, 0x22, 0xa8, 0x18,
	0x1e, 0xfe, 0x8d, 0x5e, 0xa3, 0x36, 0x57, 0x6d, 0x09, 0x63, 0x7b, 0x0a, 0x03, 0x71, 0xa1, 0x18,
	0x4e, 0x67, 0xd7, 0xf9, 0x92, 0x70, 0xd9, 0xd7, 0x95, 0x2d, 0xa8, 0xc2, 0x95, 0x62, 0x58, 0x7a,
	0xa5, 0x3b, 0x66, 0xe1, 0x4b, 0xb4, 0xbb, 0xd9, 0xaa, 0x23, 0x5c, 0x2b, 0x86, 0xa1, 0x62, 0x4f,
	0x8c, 0x1b, 0xa5, 0x7f, 0x30, 0x17, 0x6a, 0x6c, 0x23, 0x2f, 0x95, 0x65, 0x46, 0x13, 0x07, 0xec,
	0x77, 0xf0, 0x48, 0xc7, 0x2e, 0x2f, 0xbc, 0xfb, 0x6c, 0xf2, 0x92, 0x73, 0xbe, 0xb3, 0x50, 0xcd,
	0xf9, 0x97, 0xc4, 0xdf, 0xbb, 0x4f, 0x0f, 0xfd, 0x15, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0xeb,
	0x01, 0xd1, 0xb8, 0x8e, 0x01, 0x00, 0x00,
}
